{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# AdFlow Pro - Meta Advertising Campaign Management Platform\n\n## Overview\n\nAdFlow Pro is a comprehensive web application for managing Meta (Facebook/Instagram) advertising campaigns. The platform provides a unified dashboard for creating, monitoring, and optimizing social media advertising campaigns with features including campaign creation wizards, analytics dashboards, template management, and real-time performance metrics.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety and component-based development\n- **Routing**: Wouter for lightweight client-side routing with minimal bundle size\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **UI Framework**: Radix UI primitives with shadcn/ui components for accessible, customizable design system\n- **Styling**: Tailwind CSS with custom design tokens for Meta platform branding (Facebook blue, Instagram pink)\n- **Form Handling**: React Hook Form with Zod validation for type-safe form management\n- **Build Tool**: Vite for fast development and optimized production builds\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js REST API server\n- **Database ORM**: Drizzle ORM with PostgreSQL dialect for type-safe database operations\n- **Session Management**: Connect-pg-simple for PostgreSQL-backed session storage\n- **Development**: Custom Vite middleware integration for seamless full-stack development\n- **API Design**: RESTful endpoints with consistent error handling and logging middleware\n\n### Data Storage Solutions\n- **Primary Database**: PostgreSQL with Neon serverless database for scalability\n- **Schema Management**: Drizzle Kit for database migrations and schema synchronization\n- **Development Storage**: In-memory storage implementation for rapid prototyping and testing\n- **Session Storage**: PostgreSQL-backed sessions for user authentication state\n\n### Key Features Architecture\n- **Campaign Management**: Multi-step wizard for campaign creation with audience targeting and ad creative management\n- **Analytics Dashboard**: Real-time metrics visualization with Recharts for campaign performance tracking\n- **Template System**: Pre-built ad templates categorized by platform (Facebook, Instagram, both) and campaign objectives\n- **Platform Integration**: Designed for Meta advertising platforms with dedicated Facebook and Instagram campaign support\n\n### Authentication and Authorization\n- **User Management**: User registration and authentication system with password-based authentication\n- **Session Handling**: Secure session management with HTTP-only cookies\n- **Demo Mode**: Mock user implementation for development and demonstration purposes\n\n## External Dependencies\n\n### Database Services\n- **Neon Database**: Serverless PostgreSQL database for production data storage\n- **DATABASE_URL**: Environment variable for database connection string configuration\n\n### UI and Component Libraries\n- **Radix UI**: Comprehensive set of accessible, unstyled UI primitives including dialogs, dropdowns, navigation components\n- **Recharts**: React charting library for analytics and performance visualization\n- **Lucide React**: Icon library providing consistent iconography throughout the application\n- **Embla Carousel**: Touch-friendly carousel component for template browsing\n\n### Development and Build Tools\n- **Replit Integration**: Custom Vite plugins for Replit development environment including runtime error overlay and cartographer\n- **TypeScript**: Full TypeScript configuration for type safety across client, server, and shared code\n- **ESBuild**: Fast bundling for server-side code in production builds\n\n### Form and Validation\n- **Zod**: Schema validation library for runtime type checking and form validation\n- **React Hook Form**: Performance-optimized form library with minimal re-renders\n- **Hookform Resolvers**: Integration between React Hook Form and Zod validation schemas\n\n### Styling and Design\n- **Tailwind CSS**: Utility-first CSS framework with custom design system configuration\n- **Class Variance Authority**: Type-safe utility for creating component variants\n- **CLSX**: Utility for constructing className strings conditionally","size_bytes":4318},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        // Meta platform colors\n        \"fb-blue\": \"var(--fb-blue)\",\n        \"ig-pink\": \"var(--ig-pink)\",\n        success: \"var(--success)\",\n        \"bg-light\": \"var(--bg-light)\",\n        \"text-dark\": \"var(--text-dark)\",\n        warning: \"var(--warning)\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        inter: [\"Inter\", \"system-ui\", \"sans-serif\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3075},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/ai-copy-generator.ts":{"content":"import OpenAI from \"openai\";\n\n// the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\nfunction getOpenAIClient() {\n  if (!process.env.OPENAI_API_KEY) {\n    throw new Error(\"OpenAI API key not configured\");\n  }\n  return new OpenAI({\n    apiKey: process.env.OPENAI_API_KEY,\n  });\n}\n\nexport interface AdCopyRequest {\n  objective: string;\n  platform: string[];\n  industry?: string;\n  targetAudience: {\n    ageRange: { min: number; max: number };\n    location: string;\n    interests: string[];\n  };\n  productService?: string;\n  tone?: string;\n  callToAction?: string;\n}\n\nexport interface AdCopyResponse {\n  headlines: string[];\n  descriptions: string[];\n  callToActions: string[];\n  hashtags: string[];\n}\n\nexport async function generateAdCopy(request: AdCopyRequest): Promise<AdCopyResponse> {\n  const platformText = request.platform.includes('facebook') && request.platform.includes('instagram') \n    ? 'Facebook and Instagram' \n    : request.platform.join(' and ');\n\n  const audienceText = `${request.targetAudience.ageRange.min}-${request.targetAudience.ageRange.max} year olds in ${request.targetAudience.location}`;\n  const interestsText = request.targetAudience.interests.length > 0 \n    ? ` interested in ${request.targetAudience.interests.join(', ')}` \n    : '';\n\n  const prompt = `Create compelling ad copy for a ${request.objective} campaign on ${platformText}.\n\nTarget Audience: ${audienceText}${interestsText}\n${request.industry ? `Industry: ${request.industry}` : ''}\n${request.productService ? `Product/Service: ${request.productService}` : ''}\n${request.tone ? `Tone: ${request.tone}` : 'Tone: Professional but engaging'}\n\nGenerate:\n- 5 compelling headlines (25-40 characters each)\n- 5 engaging descriptions (90-125 characters each)\n- 5 strong call-to-action phrases (10-20 characters each)\n- 10 relevant hashtags for social media\n\nFocus on:\n- Clear value propositions\n- Emotional triggers appropriate for the audience\n- Platform-specific best practices\n- Urgency and action-oriented language\n\nRespond in JSON format with the structure:\n{\n  \"headlines\": [\"headline1\", \"headline2\", ...],\n  \"descriptions\": [\"description1\", \"description2\", ...],\n  \"callToActions\": [\"cta1\", \"cta2\", ...],\n  \"hashtags\": [\"hashtag1\", \"hashtag2\", ...]\n}`;\n\n  try {\n    const openai = getOpenAIClient();\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are an expert Meta advertising copywriter with deep knowledge of Facebook and Instagram ad best practices. Create high-converting ad copy that follows platform guidelines and drives engagement.\"\n        },\n        {\n          role: \"user\",\n          content: prompt\n        }\n      ],\n      response_format: { type: \"json_object\" },\n      temperature: 0.8,\n      max_tokens: 1500,\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || '{}');\n    \n    return {\n      headlines: result.headlines || [],\n      descriptions: result.descriptions || [],\n      callToActions: result.callToActions || [],\n      hashtags: result.hashtags || [],\n    };\n  } catch (error) {\n    console.error('Error generating ad copy:', error);\n    throw new Error('Failed to generate ad copy');\n  }\n}\n\nexport async function optimizeAdCopy(\n  originalCopy: string,\n  platform: string,\n  objective: string,\n  performanceData?: { ctr: number; conversions: number }\n): Promise<{ optimizedCopy: string; suggestions: string[] }> {\n  const performanceContext = performanceData \n    ? `Current performance: CTR ${performanceData.ctr}%, Conversions: ${performanceData.conversions}`\n    : '';\n\n  const prompt = `Optimize this ${platform} ad copy for a ${objective} campaign:\n\nOriginal Copy: \"${originalCopy}\"\n${performanceContext}\n\nProvide:\n1. An optimized version of the copy\n2. 3-5 specific improvement suggestions\n\nFocus on:\n- Improving click-through rates\n- Stronger emotional appeal\n- Better call-to-action\n- Platform-specific optimization\n- A/B testing recommendations\n\nRespond in JSON format:\n{\n  \"optimizedCopy\": \"improved version\",\n  \"suggestions\": [\"suggestion1\", \"suggestion2\", ...]\n}`;\n\n  try {\n    const openai = getOpenAIClient();\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are an expert in Meta advertising optimization with proven track record of improving ad performance through copy optimization.\"\n        },\n        {\n          role: \"user\",\n          content: prompt\n        }\n      ],\n      response_format: { type: \"json_object\" },\n      temperature: 0.7,\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || '{}');\n    \n    return {\n      optimizedCopy: result.optimizedCopy || originalCopy,\n      suggestions: result.suggestions || [],\n    };\n  } catch (error) {\n    console.error('Error optimizing ad copy:', error);\n    throw new Error('Failed to optimize ad copy');\n  }\n}","size_bytes":5056},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertCampaignSchema, insertAdTemplateSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { generateAdCopy, optimizeAdCopy, type AdCopyRequest } from \"./ai-copy-generator\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Get dashboard stats\n  app.get(\"/api/dashboard/stats\", async (req, res) => {\n    try {\n      // For demo purposes, using a mock user ID\n      const userId = \"demo-user-id\";\n      const stats = await storage.getDashboardStats(userId);\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // Get campaigns\n  app.get(\"/api/campaigns\", async (req, res) => {\n    try {\n      // For demo purposes, using a mock user ID\n      const userId = \"demo-user-id\";\n      const campaigns = await storage.getCampaigns(userId);\n      res.json(campaigns);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch campaigns\" });\n    }\n  });\n\n  // Get single campaign\n  app.get(\"/api/campaigns/:id\", async (req, res) => {\n    try {\n      const campaign = await storage.getCampaign(req.params.id);\n      if (!campaign) {\n        return res.status(404).json({ message: \"Campaign not found\" });\n      }\n      res.json(campaign);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch campaign\" });\n    }\n  });\n\n  // Create campaign\n  app.post(\"/api/campaigns\", async (req, res) => {\n    try {\n      const validatedData = insertCampaignSchema.parse(req.body);\n      // For demo purposes, using a mock user ID\n      const userId = \"demo-user-id\";\n      const campaign = await storage.createCampaign({ ...validatedData, userId });\n      res.status(201).json(campaign);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create campaign\" });\n    }\n  });\n\n  // Update campaign\n  app.patch(\"/api/campaigns/:id\", async (req, res) => {\n    try {\n      const campaign = await storage.updateCampaign(req.params.id, req.body);\n      if (!campaign) {\n        return res.status(404).json({ message: \"Campaign not found\" });\n      }\n      res.json(campaign);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update campaign\" });\n    }\n  });\n\n  // Delete campaign\n  app.delete(\"/api/campaigns/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteCampaign(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Campaign not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete campaign\" });\n    }\n  });\n\n  // Get ad templates\n  app.get(\"/api/templates\", async (req, res) => {\n    try {\n      const templates = await storage.getAdTemplates();\n      res.json(templates);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch templates\" });\n    }\n  });\n\n  // Create ad template\n  app.post(\"/api/templates\", async (req, res) => {\n    try {\n      const validatedData = insertAdTemplateSchema.parse(req.body);\n      const template = await storage.createAdTemplate(validatedData);\n      res.status(201).json(template);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create template\" });\n    }\n  });\n\n  // Get campaign metrics\n  app.get(\"/api/campaigns/:id/metrics\", async (req, res) => {\n    try {\n      const metrics = await storage.getCampaignMetrics(req.params.id);\n      res.json(metrics);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch campaign metrics\" });\n    }\n  });\n\n  // AI-powered ad copy generation\n  app.post(\"/api/ai/generate-copy\", async (req, res) => {\n    try {\n      const adCopyRequest: AdCopyRequest = req.body;\n      const generatedCopy = await generateAdCopy(adCopyRequest);\n      res.json(generatedCopy);\n    } catch (error) {\n      console.error(\"Error generating ad copy:\", error);\n      if (error instanceof Error && error.message.includes(\"API key not configured\")) {\n        return res.status(400).json({ \n          message: \"OpenAI API key not configured. Please add OPENAI_API_KEY to your environment variables.\" \n        });\n      }\n      res.status(500).json({ message: \"Failed to generate ad copy\" });\n    }\n  });\n\n  // AI-powered ad copy optimization\n  app.post(\"/api/ai/optimize-copy\", async (req, res) => {\n    try {\n      const { originalCopy, platform, objective, performanceData } = req.body;\n      const optimizedResult = await optimizeAdCopy(originalCopy, platform, objective, performanceData);\n      res.json(optimizedResult);\n    } catch (error) {\n      console.error(\"Error optimizing ad copy:\", error);\n      if (error instanceof Error && error.message.includes(\"API key not configured\")) {\n        return res.status(400).json({ \n          message: \"OpenAI API key not configured. Please add OPENAI_API_KEY to your environment variables.\" \n        });\n      }\n      res.status(500).json({ message: \"Failed to optimize ad copy\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":5459},"server/storage.ts":{"content":"import { type User, type InsertUser, type Campaign, type InsertCampaign, type AdTemplate, type InsertAdTemplate, type CampaignMetrics, type InsertCampaignMetrics } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Campaigns\n  getCampaigns(userId: string): Promise<Campaign[]>;\n  getCampaign(id: string): Promise<Campaign | undefined>;\n  createCampaign(campaign: InsertCampaign & { userId: string }): Promise<Campaign>;\n  updateCampaign(id: string, updates: Partial<Campaign>): Promise<Campaign | undefined>;\n  deleteCampaign(id: string): Promise<boolean>;\n  \n  // Ad Templates\n  getAdTemplates(): Promise<AdTemplate[]>;\n  getAdTemplate(id: string): Promise<AdTemplate | undefined>;\n  createAdTemplate(template: InsertAdTemplate): Promise<AdTemplate>;\n  \n  // Campaign Metrics\n  getCampaignMetrics(campaignId: string): Promise<CampaignMetrics[]>;\n  createCampaignMetrics(metrics: InsertCampaignMetrics): Promise<CampaignMetrics>;\n  \n  // Dashboard Stats\n  getDashboardStats(userId: string): Promise<{\n    totalImpressions: number;\n    totalClicks: number;\n    avgCtr: number;\n    avgCpc: number;\n    activeCampaigns: number;\n    totalSpent: number;\n    budgetRemaining: number;\n  }>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private campaigns: Map<string, Campaign>;\n  private adTemplates: Map<string, AdTemplate>;\n  private campaignMetrics: Map<string, CampaignMetrics>;\n\n  constructor() {\n    this.users = new Map();\n    this.campaigns = new Map();\n    this.adTemplates = new Map();\n    this.campaignMetrics = new Map();\n    \n    // Initialize with some ad templates\n    this.initializeAdTemplates();\n  }\n\n  private initializeAdTemplates() {\n    const templates: AdTemplate[] = [\n      {\n        id: randomUUID(),\n        name: \"Summer Sale Banner\",\n        category: \"promotion\",\n        platform: \"both\",\n        thumbnail: \"https://images.unsplash.com/photo-1556742049-0cfed4f6a45d?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n        content: {\n          headline: \"Summer Sale - Up to 50% Off\",\n          description: \"Don't miss out on our biggest sale of the year!\",\n          cta: \"Shop Now\"\n        },\n        isActive: true,\n        createdAt: new Date(),\n      },\n      {\n        id: randomUUID(),\n        name: \"Brand Awareness\",\n        category: \"branding\",\n        platform: \"instagram\",\n        thumbnail: \"https://images.unsplash.com/photo-1441986300917-64674bd600d8?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n        content: {\n          headline: \"Discover Our Brand\",\n          description: \"Quality products for modern lifestyle\",\n          cta: \"Learn More\"\n        },\n        isActive: true,\n        createdAt: new Date(),\n      },\n      {\n        id: randomUUID(),\n        name: \"Holiday Collection\",\n        category: \"seasonal\",\n        platform: \"facebook\",\n        thumbnail: \"https://images.unsplash.com/photo-1556742502-ec7c0e9f34b1?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n        content: {\n          headline: \"Holiday Collection 2024\",\n          description: \"Perfect gifts for everyone on your list\",\n          cta: \"Shop Collection\"\n        },\n        isActive: true,\n        createdAt: new Date(),\n      }\n    ];\n    \n    templates.forEach(template => {\n      this.adTemplates.set(template.id, template);\n    });\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async getCampaigns(userId: string): Promise<Campaign[]> {\n    return Array.from(this.campaigns.values()).filter(\n      campaign => campaign.userId === userId\n    );\n  }\n\n  async getCampaign(id: string): Promise<Campaign | undefined> {\n    return this.campaigns.get(id);\n  }\n\n  async createCampaign(campaignData: InsertCampaign & { userId: string }): Promise<Campaign> {\n    const id = randomUUID();\n    const now = new Date();\n    const campaign: Campaign = {\n      ...campaignData,\n      id,\n      spent: \"0\",\n      metrics: {},\n      createdAt: now,\n      updatedAt: now,\n    };\n    this.campaigns.set(id, campaign);\n    return campaign;\n  }\n\n  async updateCampaign(id: string, updates: Partial<Campaign>): Promise<Campaign | undefined> {\n    const campaign = this.campaigns.get(id);\n    if (!campaign) return undefined;\n    \n    const updatedCampaign = {\n      ...campaign,\n      ...updates,\n      updatedAt: new Date(),\n    };\n    this.campaigns.set(id, updatedCampaign);\n    return updatedCampaign;\n  }\n\n  async deleteCampaign(id: string): Promise<boolean> {\n    return this.campaigns.delete(id);\n  }\n\n  async getAdTemplates(): Promise<AdTemplate[]> {\n    return Array.from(this.adTemplates.values()).filter(template => template.isActive);\n  }\n\n  async getAdTemplate(id: string): Promise<AdTemplate | undefined> {\n    return this.adTemplates.get(id);\n  }\n\n  async createAdTemplate(templateData: InsertAdTemplate): Promise<AdTemplate> {\n    const id = randomUUID();\n    const template: AdTemplate = {\n      ...templateData,\n      id,\n      createdAt: new Date(),\n    };\n    this.adTemplates.set(id, template);\n    return template;\n  }\n\n  async getCampaignMetrics(campaignId: string): Promise<CampaignMetrics[]> {\n    return Array.from(this.campaignMetrics.values()).filter(\n      metrics => metrics.campaignId === campaignId\n    );\n  }\n\n  async createCampaignMetrics(metricsData: InsertCampaignMetrics): Promise<CampaignMetrics> {\n    const id = randomUUID();\n    const metrics: CampaignMetrics = {\n      ...metricsData,\n      id,\n    };\n    this.campaignMetrics.set(id, metrics);\n    return metrics;\n  }\n\n  async getDashboardStats(userId: string): Promise<{\n    totalImpressions: number;\n    totalClicks: number;\n    avgCtr: number;\n    avgCpc: number;\n    activeCampaigns: number;\n    totalSpent: number;\n    budgetRemaining: number;\n  }> {\n    const userCampaigns = await this.getCampaigns(userId);\n    const activeCampaigns = userCampaigns.filter(c => c.status === 'active').length;\n    \n    const totalSpent = userCampaigns.reduce((sum, campaign) => \n      sum + parseFloat(campaign.spent || \"0\"), 0\n    );\n    \n    const totalBudget = userCampaigns.reduce((sum, campaign) => \n      sum + (campaign.totalBudget ? parseFloat(campaign.totalBudget) : parseFloat(campaign.dailyBudget) * campaign.duration), 0\n    );\n    \n    // Mock metrics for demo purposes - in production these would come from real data\n    return {\n      totalImpressions: 2400000,\n      totalClicks: 48200,\n      avgCtr: 2.01,\n      avgCpc: 0.84,\n      activeCampaigns,\n      totalSpent,\n      budgetRemaining: totalBudget - totalSpent,\n    };\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":7173},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, jsonb, boolean, decimal } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const campaigns = pgTable(\"campaigns\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  name: text(\"name\").notNull(),\n  objective: text(\"objective\").notNull(),\n  platforms: text(\"platforms\").array().notNull(),\n  status: text(\"status\").notNull().default(\"draft\"), // draft, active, paused, completed\n  dailyBudget: decimal(\"daily_budget\", { precision: 10, scale: 2 }).notNull(),\n  totalBudget: decimal(\"total_budget\", { precision: 10, scale: 2 }),\n  spent: decimal(\"spent\", { precision: 10, scale: 2 }).default(\"0\"),\n  duration: integer(\"duration\").notNull(), // days\n  targetAudience: jsonb(\"target_audience\").notNull(),\n  adCreative: jsonb(\"ad_creative\"),\n  metrics: jsonb(\"metrics\").default({}),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const adTemplates = pgTable(\"ad_templates\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  category: text(\"category\").notNull(),\n  platform: text(\"platform\").notNull(), // facebook, instagram, both\n  thumbnail: text(\"thumbnail\"),\n  content: jsonb(\"content\").notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const campaignMetrics = pgTable(\"campaign_metrics\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  campaignId: varchar(\"campaign_id\").notNull().references(() => campaigns.id),\n  date: timestamp(\"date\").notNull(),\n  impressions: integer(\"impressions\").default(0),\n  clicks: integer(\"clicks\").default(0),\n  ctr: decimal(\"ctr\", { precision: 5, scale: 2 }).default(\"0\"),\n  cpc: decimal(\"cpc\", { precision: 10, scale: 2 }).default(\"0\"),\n  conversions: integer(\"conversions\").default(0),\n  cost: decimal(\"cost\", { precision: 10, scale: 2 }).default(\"0\"),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertCampaignSchema = createInsertSchema(campaigns).omit({\n  id: true,\n  userId: true,\n  spent: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAdTemplateSchema = createInsertSchema(adTemplates).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCampaignMetricsSchema = createInsertSchema(campaignMetrics).omit({\n  id: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertCampaign = z.infer<typeof insertCampaignSchema>;\nexport type Campaign = typeof campaigns.$inferSelect;\nexport type InsertAdTemplate = z.infer<typeof insertAdTemplateSchema>;\nexport type AdTemplate = typeof adTemplates.$inferSelect;\nexport type InsertCampaignMetrics = z.infer<typeof insertCampaignMetricsSchema>;\nexport type CampaignMetrics = typeof campaignMetrics.$inferSelect;\n","size_bytes":3321},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Campaigns from \"@/pages/campaigns\";\nimport Templates from \"@/pages/templates\";\nimport Analytics from \"@/pages/analytics\";\nimport AITools from \"@/pages/ai-tools\";\nimport NotFound from \"@/pages/not-found\";\nimport Header from \"@/components/layout/header\";\nimport Sidebar from \"@/components/layout/sidebar\";\n\nfunction Router() {\n  return (\n    <div className=\"min-h-screen bg-bg-light\">\n      <Header />\n      <div className=\"flex\">\n        <Sidebar />\n        <main className=\"flex-1 p-6\">\n          <Switch>\n            <Route path=\"/\" component={Dashboard} />\n            <Route path=\"/campaigns\" component={Campaigns} />\n            <Route path=\"/templates\" component={Templates} />\n            <Route path=\"/analytics\" component={Analytics} />\n            <Route path=\"/ai-tools\" component={AITools} />\n            <Route component={NotFound} />\n          </Switch>\n        </main>\n      </div>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1443},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(210, 25%, 7.8431%);\n  --card: hsl(180, 6.6667%, 97.0588%);\n  --card-foreground: hsl(210, 25%, 7.8431%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(210, 25%, 7.8431%);\n  --primary: hsl(210, 89%, 54%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(210, 25%, 7.8431%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(240, 1.9608%, 90%);\n  --muted-foreground: hsl(210, 25%, 7.8431%);\n  --accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --accent-foreground: hsl(203.8863, 88.2845%, 53.1373%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(201.4286, 30.4348%, 90.9804%);\n  --input: hsl(200, 23.0769%, 97.4510%);\n  --ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(180, 6.6667%, 97.0588%);\n  --sidebar-foreground: hsl(210, 25%, 7.8431%);\n  --sidebar-primary: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-border: hsl(205.0000, 25.0000%, 90.5882%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n  \n  /* Meta platform colors */\n  --fb-blue: hsl(210, 89%, 54%);\n  --ig-pink: hsl(345, 83%, 61%);\n  --success: hsl(152, 100%, 41%);\n  --bg-light: hsl(214, 32%, 95%);\n  --text-dark: hsl(210, 25%, 12%);\n  --warning: hsl(25, 100%, 60%);\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(210, 89%, 54%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(195.0000, 15.3846%, 94.9020%);\n  --secondary-foreground: hsl(210, 25%, 7.8431%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(205.7143, 70%, 7.8431%);\n  --accent-foreground: hsl(203.7736, 87.6033%, 52.5490%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(207.6923, 27.6596%, 18.4314%);\n  --ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(228, 9.8039%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85.0980%);\n  --sidebar-primary: hsl(202.8169, 89.1213%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(205.7143, 70%, 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736, 87.6033%, 52.5490%);\n  --sidebar-border: hsl(205.7143, 15.7895%, 26.0784%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n  \n  /* Meta platform colors for dark mode */\n  --fb-blue: hsl(210, 89%, 54%);\n  --ig-pink: hsl(345, 83%, 61%);\n  --success: hsl(152, 100%, 41%);\n  --bg-light: hsl(228, 9.8039%, 10%);\n  --text-dark: hsl(200, 6.6667%, 91.1765%);\n  --warning: hsl(25, 100%, 60%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-bg-light text-text-dark;\n    font-family: var(--font-sans);\n  }\n}\n\n@layer components {\n  .fb-blue {\n    color: var(--fb-blue);\n  }\n  \n  .bg-fb-blue {\n    background-color: var(--fb-blue);\n  }\n  \n  .border-fb-blue {\n    border-color: var(--fb-blue);\n  }\n  \n  .ig-pink {\n    color: var(--ig-pink);\n  }\n  \n  .bg-ig-pink {\n    background-color: var(--ig-pink);\n  }\n  \n  .border-ig-pink {\n    border-color: var(--ig-pink);\n  }\n  \n  .text-success {\n    color: var(--success);\n  }\n  \n  .bg-success {\n    background-color: var(--success);\n  }\n  \n  .text-warning {\n    color: var(--warning);\n  }\n  \n  .bg-warning {\n    background-color: var(--warning);\n  }\n  \n  .text-text-dark {\n    color: var(--text-dark);\n  }\n  \n  .bg-bg-light {\n    background-color: var(--bg-light);\n  }\n}\n","size_bytes":4751},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/types.ts":{"content":"export interface DashboardStats {\n  totalImpressions: number;\n  totalClicks: number;\n  avgCtr: number;\n  avgCpc: number;\n  activeCampaigns: number;\n  totalSpent: number;\n  budgetRemaining: number;\n}\n\nexport interface CampaignFormData {\n  name: string;\n  objective: string;\n  platforms: string[];\n  dailyBudget: string;\n  duration: number;\n  targetAudience: {\n    ageRange: { min: number; max: number };\n    location: string;\n    interests: string[];\n  };\n}\n\nexport interface AdCreative {\n  headline: string;\n  description: string;\n  cta: string;\n  image?: string;\n}\n","size_bytes":566},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/ai-tools.tsx":{"content":"import { useState } from \"react\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport AdCopyGenerator from \"@/components/ai/ad-copy-generator\";\nimport CopyOptimizer from \"@/components/ai/copy-optimizer\";\nimport { Sparkles, Wand2, TrendingUp, Lightbulb } from \"lucide-react\";\n\nexport default function AITools() {\n  const [activeTab, setActiveTab] = useState(\"generator\");\n\n  const features = [\n    {\n      icon: Wand2,\n      title: \"AI Copy Generation\",\n      description: \"Generate compelling headlines, descriptions, and CTAs based on your campaign objectives and audience.\",\n      benefits: [\"Platform-optimized copy\", \"Multiple variations\", \"Audience targeting\", \"Brand voice matching\"]\n    },\n    {\n      icon: TrendingUp,\n      title: \"Copy Optimization\",\n      description: \"Improve existing ad copy using AI analysis of performance data and best practices.\",\n      benefits: [\"Performance-based improvements\", \"A/B testing suggestions\", \"Platform compliance\", \"CTR optimization\"]\n    },\n    {\n      icon: Lightbulb,\n      title: \"Smart Recommendations\",\n      description: \"Get intelligent suggestions for campaign improvements and optimization strategies.\",\n      benefits: [\"Data-driven insights\", \"Automated suggestions\", \"Performance tracking\", \"ROI optimization\"]\n    }\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-semibold text-text-dark\">AI-Powered Tools</h2>\n          <p className=\"text-gray-500 mt-1\">Enhance your campaigns with artificial intelligence</p>\n        </div>\n      </div>\n\n      {/* Features Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n        {features.map((feature, index) => {\n          const Icon = feature.icon;\n          return (\n            <Card key={index} className=\"border border-gray-200 hover:shadow-md transition-shadow\">\n              <CardHeader className=\"text-center pb-4\">\n                <div className=\"w-12 h-12 bg-fb-blue bg-opacity-10 rounded-xl flex items-center justify-center mx-auto mb-4\">\n                  <Icon className=\"text-fb-blue\" size={24} />\n                </div>\n                <CardTitle className=\"text-lg\">{feature.title}</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <p className=\"text-gray-600 text-sm text-center\">{feature.description}</p>\n                <div className=\"space-y-2\">\n                  {feature.benefits.map((benefit, idx) => (\n                    <div key={idx} className=\"flex items-center text-sm text-gray-600\">\n                      <div className=\"w-1.5 h-1.5 bg-fb-blue rounded-full mr-2\" />\n                      {benefit}\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      {/* AI Tools Tabs */}\n      <Card className=\"border border-gray-200\">\n        <CardHeader className=\"border-b border-gray-100\">\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Sparkles className=\"text-fb-blue\" size={20} />\n            <span>AI Tools Suite</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-0\">\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2 bg-gray-50 m-6 mb-0\">\n              <TabsTrigger value=\"generator\" className=\"flex items-center space-x-2\">\n                <Wand2 size={16} />\n                <span>Copy Generator</span>\n              </TabsTrigger>\n              <TabsTrigger value=\"optimizer\" className=\"flex items-center space-x-2\">\n                <TrendingUp size={16} />\n                <span>Copy Optimizer</span>\n              </TabsTrigger>\n            </TabsList>\n\n            <div className=\"p-6\">\n              <TabsContent value=\"generator\" className=\"mt-0\">\n                <div className=\"space-y-4\">\n                  <div className=\"text-center mb-6\">\n                    <h3 className=\"text-lg font-semibold text-text-dark mb-2\">AI Ad Copy Generator</h3>\n                    <p className=\"text-gray-500\">Create high-converting ad copy in seconds</p>\n                  </div>\n                  <AdCopyGenerator />\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"optimizer\" className=\"mt-0\">\n                <div className=\"space-y-4\">\n                  <div className=\"text-center mb-6\">\n                    <h3 className=\"text-lg font-semibold text-text-dark mb-2\">AI Copy Optimizer</h3>\n                    <p className=\"text-gray-500\">Improve existing ad copy with AI insights</p>\n                  </div>\n                  <CopyOptimizer />\n                </div>\n              </TabsContent>\n            </div>\n          </Tabs>\n        </CardContent>\n      </Card>\n\n      {/* AI Best Practices */}\n      <Card className=\"border border-gray-200 bg-gradient-to-r from-blue-50 to-purple-50\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2 text-fb-blue\">\n            <Lightbulb size={20} />\n            <span>AI Best Practices</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <h4 className=\"font-medium text-text-dark mb-3\">For Best Results:</h4>\n              <ul className=\"space-y-2 text-sm text-gray-600\">\n                <li className=\"flex items-start space-x-2\">\n                  <div className=\"w-1.5 h-1.5 bg-fb-blue rounded-full mt-2\" />\n                  <span>Provide detailed audience information</span>\n                </li>\n                <li className=\"flex items-start space-x-2\">\n                  <div className=\"w-1.5 h-1.5 bg-fb-blue rounded-full mt-2\" />\n                  <span>Include specific product/service details</span>\n                </li>\n                <li className=\"flex items-start space-x-2\">\n                  <div className=\"w-1.5 h-1.5 bg-fb-blue rounded-full mt-2\" />\n                  <span>Test multiple AI-generated variations</span>\n                </li>\n                <li className=\"flex items-start space-x-2\">\n                  <div className=\"w-1.5 h-1.5 bg-fb-blue rounded-full mt-2\" />\n                  <span>Customize tone to match your brand</span>\n                </li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-medium text-text-dark mb-3\">Remember:</h4>\n              <ul className=\"space-y-2 text-sm text-gray-600\">\n                <li className=\"flex items-start space-x-2\">\n                  <div className=\"w-1.5 h-1.5 bg-success rounded-full mt-2\" />\n                  <span>AI suggestions are starting points</span>\n                </li>\n                <li className=\"flex items-start space-x-2\">\n                  <div className=\"w-1.5 h-1.5 bg-success rounded-full mt-2\" />\n                  <span>Always review for brand compliance</span>\n                </li>\n                <li className=\"flex items-start space-x-2\">\n                  <div className=\"w-1.5 h-1.5 bg-success rounded-full mt-2\" />\n                  <span>Monitor performance and iterate</span>\n                </li>\n                <li className=\"flex items-start space-x-2\">\n                  <div className=\"w-1.5 h-1.5 bg-success rounded-full mt-2\" />\n                  <span>Combine AI insights with human creativity</span>\n                </li>\n              </ul>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":7811},"client/src/pages/analytics.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, LineChart, Line, PieChart, Pie, Cell } from \"recharts\";\nimport { Download, TrendingUp, TrendingDown, Eye, MousePointer } from \"lucide-react\";\nimport type { DashboardStats } from \"@/lib/types\";\n\nexport default function Analytics() {\n  const { data: stats, isLoading } = useQuery<DashboardStats>({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  // Mock data for charts\n  const performanceData = [\n    { name: 'Mon', impressions: 45000, clicks: 1200, conversions: 45 },\n    { name: 'Tue', impressions: 52000, clicks: 1400, conversions: 52 },\n    { name: 'Wed', impressions: 48000, clicks: 1100, conversions: 38 },\n    { name: 'Thu', impressions: 61000, clicks: 1600, conversions: 68 },\n    { name: 'Fri', impressions: 55000, clicks: 1300, conversions: 55 },\n    { name: 'Sat', impressions: 67000, clicks: 1800, conversions: 72 },\n    { name: 'Sun', impressions: 43000, clicks: 900, conversions: 35 },\n  ];\n\n  const platformData = [\n    { name: 'Facebook', value: 65, color: '#1877F2' },\n    { name: 'Instagram', value: 35, color: '#E4405F' },\n  ];\n\n  const audienceData = [\n    { age: '18-24', percentage: 25 },\n    { age: '25-34', percentage: 35 },\n    { age: '35-44', percentage: 20 },\n    { age: '45-54', percentage: 15 },\n    { age: '55+', percentage: 5 },\n  ];\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"h-8 bg-gray-200 rounded w-64 animate-pulse\" />\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[...Array(6)].map((_, i) => (\n            <div key={i} className=\"h-64 bg-gray-100 rounded-lg animate-pulse\" />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-semibold text-text-dark\">Analytics Dashboard</h2>\n          <p className=\"text-gray-500 mt-1\">Detailed insights into your campaign performance</p>\n        </div>\n        <div className=\"mt-4 sm:mt-0 flex space-x-3\">\n          <Button variant=\"outline\">\n            <Download className=\"mr-2\" size={16} />\n            Export Report\n          </Button>\n          <select className=\"border border-gray-200 rounded-lg px-3 py-2 text-sm\">\n            <option>Last 7 days</option>\n            <option>Last 30 days</option>\n            <option>Last 90 days</option>\n          </select>\n        </div>\n      </div>\n\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Total Reach</p>\n                <p className=\"text-2xl font-bold\">{stats ? `${(stats.totalImpressions / 1000000).toFixed(1)}M` : '0'}</p>\n              </div>\n              <div className=\"w-12 h-12 bg-fb-blue bg-opacity-10 rounded-xl flex items-center justify-center\">\n                <Eye className=\"text-fb-blue\" size={20} />\n              </div>\n            </div>\n            <div className=\"flex items-center mt-2 text-sm\">\n              <TrendingUp className=\"text-success mr-1\" size={14} />\n              <span className=\"text-success\">+12%</span>\n              <span className=\"text-gray-500 ml-1\">vs last period</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Engagement Rate</p>\n                <p className=\"text-2xl font-bold\">3.2%</p>\n              </div>\n              <div className=\"w-12 h-12 bg-ig-pink bg-opacity-10 rounded-xl flex items-center justify-center\">\n                <MousePointer className=\"text-ig-pink\" size={20} />\n              </div>\n            </div>\n            <div className=\"flex items-center mt-2 text-sm\">\n              <TrendingUp className=\"text-success mr-1\" size={14} />\n              <span className=\"text-success\">+5%</span>\n              <span className=\"text-gray-500 ml-1\">vs last period</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Conversion Rate</p>\n                <p className=\"text-2xl font-bold\">4.1%</p>\n              </div>\n              <div className=\"w-12 h-12 bg-success bg-opacity-10 rounded-xl flex items-center justify-center\">\n                <TrendingUp className=\"text-success\" size={20} />\n              </div>\n            </div>\n            <div className=\"flex items-center mt-2 text-sm\">\n              <TrendingDown className=\"text-red-500 mr-1\" size={14} />\n              <span className=\"text-red-500\">-2%</span>\n              <span className=\"text-gray-500 ml-1\">vs last period</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">ROAS</p>\n                <p className=\"text-2xl font-bold\">3.8x</p>\n              </div>\n              <div className=\"w-12 h-12 bg-warning bg-opacity-10 rounded-xl flex items-center justify-center\">\n                <TrendingUp className=\"text-warning\" size={20} />\n              </div>\n            </div>\n            <div className=\"flex items-center mt-2 text-sm\">\n              <TrendingUp className=\"text-success mr-1\" size={14} />\n              <span className=\"text-success\">+8%</span>\n              <span className=\"text-gray-500 ml-1\">vs last period</span>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Charts */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Performance Over Time</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <LineChart data={performanceData}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"name\" />\n                <YAxis />\n                <Tooltip />\n                <Line type=\"monotone\" dataKey=\"impressions\" stroke=\"#1877F2\" strokeWidth={2} />\n                <Line type=\"monotone\" dataKey=\"clicks\" stroke=\"#E4405F\" strokeWidth={2} />\n              </LineChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Platform Distribution</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <PieChart>\n                <Pie\n                  data={platformData}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  outerRadius={80}\n                  fill=\"#8884d8\"\n                  dataKey=\"value\"\n                  label={({ name, value }) => `${name}: ${value}%`}\n                >\n                  {platformData.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={entry.color} />\n                  ))}\n                </Pie>\n                <Tooltip />\n              </PieChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Audience Demographics</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <BarChart data={audienceData}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"age\" />\n                <YAxis />\n                <Tooltip />\n                <Bar dataKey=\"percentage\" fill=\"#1877F2\" />\n              </BarChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Top Performing Campaigns</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                <div>\n                  <p className=\"font-medium text-text-dark\">Summer Sale 2024</p>\n                  <p className=\"text-sm text-gray-600\">CTR: 3.2% • Conv: 4.8%</p>\n                </div>\n                <Badge className=\"bg-success bg-opacity-10 text-success border-0\">\n                  Active\n                </Badge>\n              </div>\n              <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                <div>\n                  <p className=\"font-medium text-text-dark\">Holiday Collection</p>\n                  <p className=\"text-sm text-gray-600\">CTR: 2.9% • Conv: 4.1%</p>\n                </div>\n                <Badge className=\"bg-success bg-opacity-10 text-success border-0\">\n                  Active\n                </Badge>\n              </div>\n              <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                <div>\n                  <p className=\"font-medium text-text-dark\">Brand Awareness Q2</p>\n                  <p className=\"text-sm text-gray-600\">CTR: 2.1% • Conv: 3.2%</p>\n                </div>\n                <Badge className=\"bg-warning bg-opacity-10 text-warning border-0\">\n                  Paused\n                </Badge>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10155},"client/src/pages/campaigns.tsx":{"content":"import { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Facebook, Instagram, Edit, Pause, Play, MoreHorizontal, Plus } from \"lucide-react\";\nimport type { Campaign } from \"@shared/schema\";\nimport { useState } from \"react\";\nimport CampaignWizard from \"@/components/campaigns/campaign-wizard\";\n\nexport default function Campaigns() {\n  const [showWizard, setShowWizard] = useState(false);\n  \n  const { data: campaigns, isLoading } = useQuery<Campaign[]>({\n    queryKey: [\"/api/campaigns\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"h-8 bg-gray-200 rounded w-64 animate-pulse\" />\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[...Array(6)].map((_, i) => (\n            <div key={i} className=\"h-48 bg-gray-100 rounded-lg animate-pulse\" />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active':\n        return 'bg-success bg-opacity-10 text-success';\n      case 'paused':\n        return 'bg-warning bg-opacity-10 text-warning';\n      case 'draft':\n        return 'bg-gray-100 text-gray-600';\n      default:\n        return 'bg-gray-100 text-gray-600';\n    }\n  };\n\n  const getPlatformIcons = (platforms: string[]) => {\n    return platforms.map((platform) => {\n      if (platform === 'facebook') {\n        return <Facebook key=\"facebook\" className=\"text-fb-blue\" size={16} />;\n      }\n      if (platform === 'instagram') {\n        return <Instagram key=\"instagram\" className=\"text-ig-pink\" size={16} />;\n      }\n      return null;\n    });\n  };\n\n  return (\n    <>\n      <div className=\"space-y-6\">\n        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-semibold text-text-dark\">All Campaigns</h2>\n            <p className=\"text-gray-500 mt-1\">Manage your Meta advertising campaigns</p>\n          </div>\n          <Button \n            onClick={() => setShowWizard(true)}\n            className=\"bg-fb-blue text-white hover:bg-blue-600 mt-4 sm:mt-0\"\n          >\n            <Plus className=\"mr-2\" size={16} />\n            Create Campaign\n          </Button>\n        </div>\n\n        {campaigns?.length === 0 ? (\n          <Card className=\"text-center py-12\">\n            <CardContent>\n              <div className=\"text-gray-500\">\n                <p className=\"text-lg font-medium mb-2\">No campaigns yet</p>\n                <p className=\"text-sm mb-6\">Create your first campaign to get started with Meta advertising</p>\n                <Button \n                  onClick={() => setShowWizard(true)}\n                  className=\"bg-fb-blue text-white hover:bg-blue-600\"\n                >\n                  <Plus className=\"mr-2\" size={16} />\n                  Create Your First Campaign\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {campaigns?.map((campaign) => (\n              <Card key={campaign.id} className=\"hover:shadow-md transition-shadow\">\n                <CardHeader className=\"pb-4\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-12 h-12 bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg\" />\n                      <div>\n                        <h3 className=\"font-semibold text-text-dark\">{campaign.name}</h3>\n                        <div className=\"flex items-center space-x-2 mt-1\">\n                          {getPlatformIcons(campaign.platforms)}\n                        </div>\n                      </div>\n                    </div>\n                    <Badge className={`${getStatusColor(campaign.status)} border-0`}>\n                      {campaign.status.charAt(0).toUpperCase() + campaign.status.slice(1)}\n                    </Badge>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                    <div>\n                      <p className=\"text-gray-600\">Daily Budget</p>\n                      <p className=\"font-semibold\">${campaign.dailyBudget}</p>\n                    </div>\n                    <div>\n                      <p className=\"text-gray-600\">Spent</p>\n                      <p className=\"font-semibold\">${campaign.spent}</p>\n                    </div>\n                    <div>\n                      <p className=\"text-gray-600\">Duration</p>\n                      <p className=\"font-semibold\">{campaign.duration} days</p>\n                    </div>\n                    <div>\n                      <p className=\"text-gray-600\">Objective</p>\n                      <p className=\"font-semibold text-xs capitalize\">\n                        {campaign.objective.replace('_', ' ')}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center justify-between pt-4 border-t border-gray-100\">\n                    <p className=\"text-xs text-gray-500\">\n                      Created {new Date(campaign.createdAt!).toLocaleDateString()}\n                    </p>\n                    <div className=\"flex items-center space-x-1\">\n                      <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-400 hover:text-fb-blue\">\n                        <Edit size={14} />\n                      </Button>\n                      <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-400 hover:text-warning\">\n                        {campaign.status === 'active' ? <Pause size={14} /> : <Play size={14} />}\n                      </Button>\n                      <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-400 hover:text-gray-600\">\n                        <MoreHorizontal size={14} />\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {showWizard && (\n        <CampaignWizard onClose={() => setShowWizard(false)} />\n      )}\n    </>\n  );\n}\n","size_bytes":6438},"client/src/pages/dashboard.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport StatsCards from \"@/components/dashboard/stats-cards\";\nimport QuickActions from \"@/components/dashboard/quick-actions\";\nimport CampaignList from \"@/components/dashboard/campaign-list\";\nimport { Download, Plus } from \"lucide-react\";\nimport { useState } from \"react\";\nimport CampaignWizard from \"@/components/campaigns/campaign-wizard\";\n\nexport default function Dashboard() {\n  const [showWizard, setShowWizard] = useState(false);\n\n  return (\n    <>\n      <div className=\"space-y-8\">\n        {/* Header */}\n        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-semibold text-text-dark\">Campaign Dashboard</h2>\n            <p className=\"text-gray-500 mt-1\">Monitor and optimize your Meta advertising campaigns</p>\n          </div>\n          <div className=\"mt-4 sm:mt-0 flex space-x-3\">\n            <Button variant=\"outline\">\n              <Download className=\"mr-2\" size={16} />\n              Export\n            </Button>\n            <Button \n              onClick={() => setShowWizard(true)}\n              className=\"bg-fb-blue text-white hover:bg-blue-600\"\n            >\n              <Plus className=\"mr-2\" size={16} />\n              New Campaign\n            </Button>\n          </div>\n        </div>\n\n        {/* Stats Cards */}\n        <StatsCards />\n\n        {/* Quick Actions */}\n        <QuickActions />\n\n        {/* Campaign List */}\n        <CampaignList />\n      </div>\n\n      {showWizard && (\n        <CampaignWizard onClose={() => setShowWizard(false)} />\n      )}\n    </>\n  );\n}\n","size_bytes":1636},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/templates.tsx":{"content":"import { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Facebook, Instagram, Plus, Eye } from \"lucide-react\";\nimport type { AdTemplate } from \"@shared/schema\";\n\nexport default function Templates() {\n  const { data: templates, isLoading } = useQuery<AdTemplate[]>({\n    queryKey: [\"/api/templates\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"h-8 bg-gray-200 rounded w-64 animate-pulse\" />\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[...Array(6)].map((_, i) => (\n            <div key={i} className=\"h-64 bg-gray-100 rounded-lg animate-pulse\" />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  const getPlatformIcon = (platform: string) => {\n    switch (platform) {\n      case 'facebook':\n        return <Facebook className=\"text-fb-blue\" size={16} />;\n      case 'instagram':\n        return <Instagram className=\"text-ig-pink\" size={16} />;\n      case 'both':\n        return (\n          <div className=\"flex space-x-1\">\n            <Facebook className=\"text-fb-blue\" size={14} />\n            <Instagram className=\"text-ig-pink\" size={14} />\n          </div>\n        );\n      default:\n        return null;\n    }\n  };\n\n  const getCategoryColor = (category: string) => {\n    switch (category) {\n      case 'promotion':\n        return 'bg-fb-blue bg-opacity-10 text-fb-blue';\n      case 'branding':\n        return 'bg-ig-pink bg-opacity-10 text-ig-pink';\n      case 'seasonal':\n        return 'bg-warning bg-opacity-10 text-warning';\n      default:\n        return 'bg-gray-100 text-gray-600';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-semibold text-text-dark\">Ad Templates</h2>\n          <p className=\"text-gray-500 mt-1\">Ready-to-use templates for your campaigns</p>\n        </div>\n        <Button className=\"bg-fb-blue text-white hover:bg-blue-600 mt-4 sm:mt-0\">\n          <Plus className=\"mr-2\" size={16} />\n          Create Template\n        </Button>\n      </div>\n\n      <div className=\"flex items-center space-x-4 mb-6\">\n        <div className=\"flex items-center space-x-2\">\n          <label className=\"text-sm text-gray-600\">Category:</label>\n          <select className=\"border border-gray-200 rounded-lg px-3 py-1 text-sm\">\n            <option>All Categories</option>\n            <option>Promotion</option>\n            <option>Branding</option>\n            <option>Seasonal</option>\n          </select>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <label className=\"text-sm text-gray-600\">Platform:</label>\n          <select className=\"border border-gray-200 rounded-lg px-3 py-1 text-sm\">\n            <option>All Platforms</option>\n            <option>Facebook</option>\n            <option>Instagram</option>\n            <option>Both</option>\n          </select>\n        </div>\n      </div>\n\n      {templates?.length === 0 ? (\n        <Card className=\"text-center py-12\">\n          <CardContent>\n            <div className=\"text-gray-500\">\n              <p className=\"text-lg font-medium mb-2\">No templates available</p>\n              <p className=\"text-sm mb-6\">Create your first template to get started</p>\n              <Button className=\"bg-fb-blue text-white hover:bg-blue-600\">\n                <Plus className=\"mr-2\" size={16} />\n                Create Your First Template\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {templates?.map((template) => (\n            <Card key={template.id} className=\"hover:shadow-md transition-shadow group\">\n              <div className=\"relative\">\n                <img\n                  src={template.thumbnail || \"https://images.unsplash.com/photo-1556742049-0cfed4f6a45d?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=200\"}\n                  alt={template.name}\n                  className=\"w-full h-48 object-cover rounded-t-lg\"\n                />\n                <div className=\"absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-50 transition-all rounded-t-lg flex items-center justify-center\">\n                  <Button \n                    size=\"sm\" \n                    className=\"opacity-0 group-hover:opacity-100 transition-opacity bg-white text-text-dark hover:bg-gray-100\"\n                  >\n                    <Eye className=\"mr-2\" size={14} />\n                    Preview\n                  </Button>\n                </div>\n                <div className=\"absolute top-4 right-4\">\n                  {getPlatformIcon(template.platform)}\n                </div>\n              </div>\n              <CardHeader className=\"pb-2\">\n                <div className=\"flex items-start justify-between\">\n                  <h3 className=\"font-semibold text-text-dark\">{template.name}</h3>\n                  <Badge className={`${getCategoryColor(template.category)} border-0 text-xs`}>\n                    {template.category}\n                  </Badge>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"text-sm\">\n                  <p className=\"text-gray-600\">\n                    {(template.content as any)?.description || \"Professional ad template\"}\n                  </p>\n                </div>\n                <div className=\"flex items-center justify-between pt-2 border-t border-gray-100\">\n                  <p className=\"text-xs text-gray-500\">\n                    Created {new Date(template.createdAt!).toLocaleDateString()}\n                  </p>\n                  <Button size=\"sm\" className=\"bg-fb-blue text-white hover:bg-blue-600\">\n                    Use Template\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":6170},"client/src/components/ai/ad-copy-generator.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Wand2, Copy, RefreshCw, Sparkles, AlertCircle } from \"lucide-react\";\n\ninterface AdCopyGeneratorProps {\n  campaignData?: {\n    objective: string;\n    platforms: string[];\n    targetAudience: {\n      ageRange: { min: number; max: number };\n      location: string;\n      interests: string[];\n    };\n  };\n  onCopyGenerated?: (copy: GeneratedCopy) => void;\n}\n\ninterface GeneratedCopy {\n  headlines: string[];\n  descriptions: string[];\n  callToActions: string[];\n  hashtags: string[];\n}\n\nexport default function AdCopyGenerator({ campaignData, onCopyGenerated }: AdCopyGeneratorProps) {\n  const [selectedCopy, setSelectedCopy] = useState<{\n    headline?: string;\n    description?: string;\n    callToAction?: string;\n  }>({});\n  const [generatedCopy, setGeneratedCopy] = useState<GeneratedCopy | null>(null);\n  const [formData, setFormData] = useState({\n    industry: \"\",\n    productService: \"\",\n    tone: \"professional\",\n    customPrompt: \"\",\n  });\n  const { toast } = useToast();\n\n  const generateCopyMutation = useMutation({\n    mutationFn: async () => {\n      if (!campaignData) {\n        throw new Error(\"Campaign data is required\");\n      }\n\n      const response = await apiRequest(\"POST\", \"/api/ai/generate-copy\", {\n        objective: campaignData.objective,\n        platform: campaignData.platforms,\n        industry: formData.industry,\n        productService: formData.productService,\n        tone: formData.tone,\n        targetAudience: campaignData.targetAudience,\n      });\n      return response.json();\n    },\n    onSuccess: (data: GeneratedCopy) => {\n      setGeneratedCopy(data);\n      onCopyGenerated?.(data);\n      toast({\n        title: \"AI Copy Generated\",\n        description: \"Your ad copy has been generated successfully!\",\n      });\n    },\n    onError: (error: any) => {\n      console.error(\"Generation error:\", error);\n      toast({\n        title: \"Generation Failed\",\n        description: error.message?.includes(\"API key\") \n          ? \"OpenAI API key is not configured. Please add your API key to use AI features.\"\n          : \"Failed to generate ad copy. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text);\n    toast({\n      title: \"Copied to clipboard\",\n      description: \"The text has been copied to your clipboard.\",\n    });\n  };\n\n  const handleGenerate = () => {\n    if (!campaignData) {\n      toast({\n        title: \"Missing Campaign Data\",\n        description: \"Please complete the campaign setup first.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    generateCopyMutation.mutate();\n  };\n\n  if (!campaignData) {\n    return (\n      <Card className=\"border border-gray-200\">\n        <CardContent className=\"p-8 text-center\">\n          <AlertCircle className=\"mx-auto mb-4 text-gray-400\" size={48} />\n          <h3 className=\"text-lg font-semibold text-gray-600 mb-2\">Campaign Setup Required</h3>\n          <p className=\"text-gray-500\">Complete the campaign setup to generate AI-powered ad copy.</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Card className=\"border border-gray-200\">\n        <CardHeader className=\"border-b border-gray-100\">\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Sparkles className=\"text-fb-blue\" size={20} />\n            <span>AI Ad Copy Generator</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-6\">\n            <div>\n              <Label htmlFor=\"industry\">Industry (Optional)</Label>\n              <Input\n                id=\"industry\"\n                placeholder=\"e.g., Fashion, Technology, Food\"\n                value={formData.industry}\n                onChange={(e) => setFormData({ ...formData, industry: e.target.value })}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"productService\">Product/Service (Optional)</Label>\n              <Input\n                id=\"productService\"\n                placeholder=\"e.g., Wireless headphones, Online course\"\n                value={formData.productService}\n                onChange={(e) => setFormData({ ...formData, productService: e.target.value })}\n              />\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-6\">\n            <div>\n              <Label htmlFor=\"tone\">Tone</Label>\n              <Select value={formData.tone} onValueChange={(value) => setFormData({ ...formData, tone: value })}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"professional\">Professional</SelectItem>\n                  <SelectItem value=\"casual\">Casual & Friendly</SelectItem>\n                  <SelectItem value=\"urgent\">Urgent & Action-Oriented</SelectItem>\n                  <SelectItem value=\"playful\">Playful & Fun</SelectItem>\n                  <SelectItem value=\"luxury\">Luxury & Premium</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          <div className=\"mb-6\">\n            <Label htmlFor=\"customPrompt\">Additional Instructions (Optional)</Label>\n            <Textarea\n              id=\"customPrompt\"\n              placeholder=\"Any specific requirements or brand voice guidelines...\"\n              value={formData.customPrompt}\n              onChange={(e) => setFormData({ ...formData, customPrompt: e.target.value })}\n              className=\"h-20\"\n            />\n          </div>\n\n          <Button\n            onClick={handleGenerate}\n            disabled={generateCopyMutation.isPending}\n            className=\"w-full bg-fb-blue text-white hover:bg-blue-600\"\n          >\n            {generateCopyMutation.isPending ? (\n              <>\n                <RefreshCw className=\"mr-2 animate-spin\" size={16} />\n                Generating AI Copy...\n              </>\n            ) : (\n              <>\n                <Wand2 className=\"mr-2\" size={16} />\n                Generate AI Ad Copy\n              </>\n            )}\n          </Button>\n\n          {generatedCopy && (\n            <div className=\"mt-8\">\n              <h3 className=\"text-lg font-semibold text-text-dark mb-4\">Generated Ad Copy</h3>\n              \n              <Tabs defaultValue=\"headlines\" className=\"space-y-4\">\n                <TabsList className=\"grid w-full grid-cols-4\">\n                  <TabsTrigger value=\"headlines\">Headlines</TabsTrigger>\n                  <TabsTrigger value=\"descriptions\">Descriptions</TabsTrigger>\n                  <TabsTrigger value=\"ctas\">Call-to-Actions</TabsTrigger>\n                  <TabsTrigger value=\"hashtags\">Hashtags</TabsTrigger>\n                </TabsList>\n\n                <TabsContent value=\"headlines\" className=\"space-y-3\">\n                  {generatedCopy.headlines.map((headline, index) => (\n                    <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                      <span className=\"flex-1 text-sm font-medium\">{headline}</span>\n                      <div className=\"flex space-x-2\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"ghost\"\n                          onClick={() => setSelectedCopy({ ...selectedCopy, headline })}\n                          className={selectedCopy.headline === headline ? \"bg-fb-blue text-white\" : \"\"}\n                        >\n                          Select\n                        </Button>\n                        <Button size=\"sm\" variant=\"ghost\" onClick={() => copyToClipboard(headline)}>\n                          <Copy size={14} />\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </TabsContent>\n\n                <TabsContent value=\"descriptions\" className=\"space-y-3\">\n                  {generatedCopy.descriptions.map((description, index) => (\n                    <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                      <span className=\"flex-1 text-sm\">{description}</span>\n                      <div className=\"flex space-x-2\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"ghost\"\n                          onClick={() => setSelectedCopy({ ...selectedCopy, description })}\n                          className={selectedCopy.description === description ? \"bg-fb-blue text-white\" : \"\"}\n                        >\n                          Select\n                        </Button>\n                        <Button size=\"sm\" variant=\"ghost\" onClick={() => copyToClipboard(description)}>\n                          <Copy size={14} />\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </TabsContent>\n\n                <TabsContent value=\"ctas\" className=\"space-y-3\">\n                  {generatedCopy.callToActions.map((cta, index) => (\n                    <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                      <span className=\"flex-1 text-sm font-medium\">{cta}</span>\n                      <div className=\"flex space-x-2\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"ghost\"\n                          onClick={() => setSelectedCopy({ ...selectedCopy, callToAction: cta })}\n                          className={selectedCopy.callToAction === cta ? \"bg-fb-blue text-white\" : \"\"}\n                        >\n                          Select\n                        </Button>\n                        <Button size=\"sm\" variant=\"ghost\" onClick={() => copyToClipboard(cta)}>\n                          <Copy size={14} />\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </TabsContent>\n\n                <TabsContent value=\"hashtags\" className=\"space-y-3\">\n                  <div className=\"flex flex-wrap gap-2\">\n                    {generatedCopy.hashtags.map((hashtag, index) => (\n                      <Badge \n                        key={index} \n                        variant=\"secondary\" \n                        className=\"cursor-pointer hover:bg-fb-blue hover:text-white transition-colors\"\n                        onClick={() => copyToClipboard(hashtag)}\n                      >\n                        {hashtag}\n                      </Badge>\n                    ))}\n                  </div>\n                  <p className=\"text-xs text-gray-500 mt-2\">Click any hashtag to copy it</p>\n                </TabsContent>\n              </Tabs>\n\n              {(selectedCopy.headline || selectedCopy.description || selectedCopy.callToAction) && (\n                <Card className=\"mt-6 border border-fb-blue\">\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-fb-blue\">Selected Ad Copy</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    {selectedCopy.headline && (\n                      <div>\n                        <Label className=\"text-xs font-medium text-gray-600\">Headline</Label>\n                        <p className=\"font-semibold\">{selectedCopy.headline}</p>\n                      </div>\n                    )}\n                    {selectedCopy.description && (\n                      <div>\n                        <Label className=\"text-xs font-medium text-gray-600\">Description</Label>\n                        <p>{selectedCopy.description}</p>\n                      </div>\n                    )}\n                    {selectedCopy.callToAction && (\n                      <div>\n                        <Label className=\"text-xs font-medium text-gray-600\">Call-to-Action</Label>\n                        <p className=\"font-medium\">{selectedCopy.callToAction}</p>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":13012},"client/src/components/ai/copy-optimizer.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Sparkles, RefreshCw, TrendingUp, Copy } from \"lucide-react\";\n\ninterface CopyOptimizerProps {\n  initialCopy?: string;\n  platform?: string;\n  objective?: string;\n  performanceData?: {\n    ctr: number;\n    conversions: number;\n  };\n}\n\nexport default function CopyOptimizer({ \n  initialCopy = \"\", \n  platform = \"facebook\", \n  objective = \"conversions\",\n  performanceData \n}: CopyOptimizerProps) {\n  const [originalCopy, setOriginalCopy] = useState(initialCopy);\n  const [selectedPlatform, setSelectedPlatform] = useState(platform);\n  const [selectedObjective, setSelectedObjective] = useState(objective);\n  const [optimizedResult, setOptimizedResult] = useState<{\n    optimizedCopy: string;\n    suggestions: string[];\n  } | null>(null);\n  const { toast } = useToast();\n\n  const optimizeMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/ai/optimize-copy\", {\n        originalCopy,\n        platform: selectedPlatform,\n        objective: selectedObjective,\n        performanceData,\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setOptimizedResult(data);\n      toast({\n        title: \"Copy Optimized\",\n        description: \"Your ad copy has been optimized successfully!\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Optimization Failed\",\n        description: error.message?.includes(\"API key\") \n          ? \"OpenAI API key is not configured. Please add your API key to use AI features.\"\n          : \"Failed to optimize ad copy. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text);\n    toast({\n      title: \"Copied to clipboard\",\n      description: \"The text has been copied to your clipboard.\",\n    });\n  };\n\n  const handleOptimize = () => {\n    if (!originalCopy.trim()) {\n      toast({\n        title: \"Missing Copy\",\n        description: \"Please enter the ad copy you want to optimize.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    optimizeMutation.mutate();\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card className=\"border border-gray-200\">\n        <CardHeader className=\"border-b border-gray-100\">\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Sparkles className=\"text-fb-blue\" size={20} />\n            <span>AI Copy Optimizer</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-6 space-y-6\">\n          <div>\n            <Label htmlFor=\"originalCopy\">Original Ad Copy</Label>\n            <Textarea\n              id=\"originalCopy\"\n              placeholder=\"Enter your current ad copy here...\"\n              value={originalCopy}\n              onChange={(e) => setOriginalCopy(e.target.value)}\n              className=\"h-32 mt-2\"\n            />\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"platform\">Platform</Label>\n              <Select value={selectedPlatform} onValueChange={setSelectedPlatform}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"facebook\">Facebook</SelectItem>\n                  <SelectItem value=\"instagram\">Instagram</SelectItem>\n                  <SelectItem value=\"both\">Both Platforms</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label htmlFor=\"objective\">Campaign Objective</Label>\n              <Select value={selectedObjective} onValueChange={setSelectedObjective}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"brand_awareness\">Brand Awareness</SelectItem>\n                  <SelectItem value=\"traffic\">Traffic</SelectItem>\n                  <SelectItem value=\"conversions\">Conversions</SelectItem>\n                  <SelectItem value=\"lead_generation\">Lead Generation</SelectItem>\n                  <SelectItem value=\"engagement\">Engagement</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          {performanceData && (\n            <Card className=\"bg-gray-50 border-0\">\n              <CardContent className=\"p-4\">\n                <h4 className=\"font-medium text-text-dark mb-3\">Current Performance</h4>\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  <div className=\"flex items-center space-x-2\">\n                    <TrendingUp className=\"text-fb-blue\" size={16} />\n                    <span className=\"text-gray-600\">CTR:</span>\n                    <span className=\"font-medium\">{performanceData.ctr}%</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <TrendingUp className=\"text-success\" size={16} />\n                    <span className=\"text-gray-600\">Conversions:</span>\n                    <span className=\"font-medium\">{performanceData.conversions}</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          <Button\n            onClick={handleOptimize}\n            disabled={optimizeMutation.isPending || !originalCopy.trim()}\n            className=\"w-full bg-fb-blue text-white hover:bg-blue-600\"\n          >\n            {optimizeMutation.isPending ? (\n              <>\n                <RefreshCw className=\"mr-2 animate-spin\" size={16} />\n                Optimizing Copy...\n              </>\n            ) : (\n              <>\n                <Sparkles className=\"mr-2\" size={16} />\n                Optimize Ad Copy\n              </>\n            )}\n          </Button>\n\n          {optimizedResult && (\n            <div className=\"space-y-6 pt-6 border-t border-gray-200\">\n              <div>\n                <h3 className=\"text-lg font-semibold text-text-dark mb-4\">Optimized Results</h3>\n                \n                <Card className=\"border border-success\">\n                  <CardHeader className=\"pb-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <CardTitle className=\"text-success\">Optimized Copy</CardTitle>\n                      <Button \n                        size=\"sm\" \n                        variant=\"ghost\" \n                        onClick={() => copyToClipboard(optimizedResult.optimizedCopy)}\n                      >\n                        <Copy size={14} />\n                      </Button>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-text-dark leading-relaxed\">\n                      {optimizedResult.optimizedCopy}\n                    </p>\n                  </CardContent>\n                </Card>\n              </div>\n\n              <div>\n                <h4 className=\"font-medium text-text-dark mb-3\">Improvement Suggestions</h4>\n                <div className=\"space-y-3\">\n                  {optimizedResult.suggestions.map((suggestion, index) => (\n                    <div key={index} className=\"flex items-start space-x-3 p-3 bg-gray-50 rounded-lg\">\n                      <Badge variant=\"secondary\" className=\"mt-0.5\">\n                        {index + 1}\n                      </Badge>\n                      <p className=\"text-sm text-gray-700 flex-1\">{suggestion}</p>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                <h5 className=\"font-medium text-fb-blue mb-2\">💡 Next Steps</h5>\n                <ul className=\"text-sm text-gray-700 space-y-1\">\n                  <li>• A/B test the original vs optimized copy</li>\n                  <li>• Monitor performance metrics for 3-7 days</li>\n                  <li>• Apply winning elements to similar campaigns</li>\n                </ul>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":8779},"client/src/components/campaigns/campaign-wizard.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Facebook, Instagram, ArrowRight } from \"lucide-react\";\nimport ProgressIndicator from \"@/components/ui/progress-indicator\";\nimport AdCopyGenerator from \"@/components/ai/ad-copy-generator\";\nimport type { CampaignFormData } from \"@/lib/types\";\n\nconst campaignSchema = z.object({\n  name: z.string().min(1, \"Campaign name is required\"),\n  objective: z.string().min(1, \"Objective is required\"),\n  platforms: z.array(z.string()).min(1, \"Select at least one platform\"),\n  dailyBudget: z.string().min(1, \"Daily budget is required\"),\n  duration: z.number().min(1, \"Duration must be at least 1 day\"),\n  targetAudience: z.object({\n    ageRange: z.object({\n      min: z.number().min(13).max(65),\n      max: z.number().min(13).max(65),\n    }),\n    location: z.string().min(1, \"Location is required\"),\n    interests: z.array(z.string()),\n  }),\n});\n\ninterface CampaignWizardProps {\n  onClose: () => void;\n}\n\nexport default function CampaignWizard({ onClose }: CampaignWizardProps) {\n  const [currentStep, setCurrentStep] = useState(0);\n  const [generatedAdCopy, setGeneratedAdCopy] = useState<any>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const steps = [\"Campaign Setup\", \"AI Ad Creation\", \"Review & Launch\"];\n\n  const form = useForm<CampaignFormData>({\n    resolver: zodResolver(campaignSchema),\n    defaultValues: {\n      name: \"\",\n      objective: \"\",\n      platforms: [],\n      dailyBudget: \"\",\n      duration: 7,\n      targetAudience: {\n        ageRange: { min: 18, max: 65 },\n        location: \"United States\",\n        interests: [],\n      },\n    },\n  });\n\n  const createCampaignMutation = useMutation({\n    mutationFn: async (data: CampaignFormData) => {\n      const response = await apiRequest(\"POST\", \"/api/campaigns\", {\n        ...data,\n        dailyBudget: parseFloat(data.dailyBudget),\n        targetAudience: data.targetAudience,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/campaigns\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Campaign Created Successfully\",\n        description: \"Your campaign is now live and running\",\n      });\n      onClose();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create campaign. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: CampaignFormData) => {\n    if (currentStep < steps.length - 1) {\n      setCurrentStep(currentStep + 1);\n    } else {\n      createCampaignMutation.mutate(data);\n    }\n  };\n\n  const handlePlatformChange = (platform: string, checked: boolean) => {\n    const currentPlatforms = form.getValues(\"platforms\");\n    if (checked) {\n      form.setValue(\"platforms\", [...currentPlatforms, platform]);\n    } else {\n      form.setValue(\"platforms\", currentPlatforms.filter(p => p !== platform));\n    }\n  };\n\n  return (\n    <Dialog open onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader className=\"border-b border-gray-200 pb-6\">\n          <DialogTitle className=\"text-xl font-semibold text-text-dark\">\n            Create New Campaign\n          </DialogTitle>\n          <div className=\"mt-6\">\n            <ProgressIndicator steps={steps} currentStep={currentStep} />\n          </div>\n        </DialogHeader>\n\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"p-6 space-y-6\">\n          {currentStep === 0 && (\n            <>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <Label htmlFor=\"name\">Campaign Name</Label>\n                  <Input\n                    id=\"name\"\n                    placeholder=\"Enter campaign name\"\n                    {...form.register(\"name\")}\n                  />\n                  {form.formState.errors.name && (\n                    <p className=\"text-sm text-red-500 mt-1\">\n                      {form.formState.errors.name.message}\n                    </p>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"objective\">Campaign Objective</Label>\n                  <Select onValueChange={(value) => form.setValue(\"objective\", value)}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select objective\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"brand_awareness\">Brand Awareness</SelectItem>\n                      <SelectItem value=\"traffic\">Traffic</SelectItem>\n                      <SelectItem value=\"conversions\">Conversions</SelectItem>\n                      <SelectItem value=\"lead_generation\">Lead Generation</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  {form.formState.errors.objective && (\n                    <p className=\"text-sm text-red-500 mt-1\">\n                      {form.formState.errors.objective.message}\n                    </p>\n                  )}\n                </div>\n              </div>\n\n              <div>\n                <Label>Platform Selection</Label>\n                <div className=\"grid grid-cols-2 gap-4 mt-2\">\n                  <label className=\"flex items-center p-4 border border-gray-200 rounded-lg cursor-pointer hover:border-fb-blue\">\n                    <Checkbox\n                      onCheckedChange={(checked) => \n                        handlePlatformChange(\"facebook\", checked as boolean)\n                      }\n                      className=\"mr-3\"\n                    />\n                    <div className=\"flex items-center space-x-3\">\n                      <Facebook className=\"text-fb-blue\" size={20} />\n                      <div>\n                        <p className=\"font-medium text-text-dark\">Facebook</p>\n                        <p className=\"text-sm text-gray-500\">Reach broad audience</p>\n                      </div>\n                    </div>\n                  </label>\n\n                  <label className=\"flex items-center p-4 border border-gray-200 rounded-lg cursor-pointer hover:border-ig-pink\">\n                    <Checkbox\n                      onCheckedChange={(checked) => \n                        handlePlatformChange(\"instagram\", checked as boolean)\n                      }\n                      className=\"mr-3\"\n                    />\n                    <div className=\"flex items-center space-x-3\">\n                      <Instagram className=\"text-ig-pink\" size={20} />\n                      <div>\n                        <p className=\"font-medium text-text-dark\">Instagram</p>\n                        <p className=\"text-sm text-gray-500\">Visual storytelling</p>\n                      </div>\n                    </div>\n                  </label>\n                </div>\n                {form.formState.errors.platforms && (\n                  <p className=\"text-sm text-red-500 mt-1\">\n                    {form.formState.errors.platforms.message}\n                  </p>\n                )}\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <Label htmlFor=\"dailyBudget\">Daily Budget</Label>\n                  <div className=\"relative\">\n                    <span className=\"absolute left-3 top-2 text-gray-500\">$</span>\n                    <Input\n                      id=\"dailyBudget\"\n                      type=\"number\"\n                      placeholder=\"50\"\n                      className=\"pl-8\"\n                      {...form.register(\"dailyBudget\")}\n                    />\n                  </div>\n                  {form.formState.errors.dailyBudget && (\n                    <p className=\"text-sm text-red-500 mt-1\">\n                      {form.formState.errors.dailyBudget.message}\n                    </p>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"duration\">Campaign Duration</Label>\n                  <Select onValueChange={(value) => form.setValue(\"duration\", parseInt(value))}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select duration\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"7\">7 days</SelectItem>\n                      <SelectItem value=\"14\">14 days</SelectItem>\n                      <SelectItem value=\"30\">30 days</SelectItem>\n                      <SelectItem value=\"90\">Custom</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div>\n                <Label>Target Audience</Label>\n                <div className=\"bg-gray-50 rounded-lg p-4 mt-2\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    <div>\n                      <Label className=\"text-xs font-medium text-gray-600\">Age Range</Label>\n                      <div className=\"flex items-center space-x-2 mt-1\">\n                        <Input\n                          type=\"number\"\n                          placeholder=\"18\"\n                          className=\"text-sm\"\n                          {...form.register(\"targetAudience.ageRange.min\", { valueAsNumber: true })}\n                        />\n                        <span className=\"text-gray-400\">-</span>\n                        <Input\n                          type=\"number\"\n                          placeholder=\"65\"\n                          className=\"text-sm\"\n                          {...form.register(\"targetAudience.ageRange.max\", { valueAsNumber: true })}\n                        />\n                      </div>\n                    </div>\n\n                    <div>\n                      <Label className=\"text-xs font-medium text-gray-600\">Location</Label>\n                      <Input\n                        placeholder=\"United States\"\n                        className=\"text-sm mt-1\"\n                        {...form.register(\"targetAudience.location\")}\n                      />\n                    </div>\n\n                    <div>\n                      <Label className=\"text-xs font-medium text-gray-600\">Interests</Label>\n                      <Input\n                        placeholder=\"Fashion, Shopping\"\n                        className=\"text-sm mt-1\"\n                      />\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </>\n          )}\n\n          {currentStep === 1 && (\n            <div className=\"space-y-6\">\n              <div className=\"text-center mb-6\">\n                <h3 className=\"text-lg font-semibold text-text-dark mb-2\">AI-Powered Ad Creation</h3>\n                <p className=\"text-gray-500\">Generate compelling ad copy using artificial intelligence</p>\n              </div>\n              \n              <AdCopyGenerator\n                campaignData={{\n                  objective: form.getValues(\"objective\"),\n                  platforms: form.getValues(\"platforms\"),\n                  targetAudience: form.getValues(\"targetAudience\"),\n                }}\n                onCopyGenerated={(copy) => setGeneratedAdCopy(copy)}\n              />\n            </div>\n          )}\n\n          {currentStep === 2 && (\n            <div className=\"space-y-6\">\n              <h3 className=\"text-lg font-semibold text-text-dark\">Review & Launch</h3>\n              <div className=\"bg-gray-50 rounded-lg p-6 space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <p className=\"text-sm text-gray-600\">Campaign Name</p>\n                    <p className=\"font-medium\">{form.getValues(\"name\")}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-gray-600\">Objective</p>\n                    <p className=\"font-medium\">{form.getValues(\"objective\")}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-gray-600\">Daily Budget</p>\n                    <p className=\"font-medium\">${form.getValues(\"dailyBudget\")}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-gray-600\">Duration</p>\n                    <p className=\"font-medium\">{form.getValues(\"duration\")} days</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          <div className=\"flex justify-between items-center pt-6 border-t border-gray-200\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={onClose}\n            >\n              Cancel\n            </Button>\n            <div className=\"flex space-x-3\">\n              {currentStep > 0 && (\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setCurrentStep(currentStep - 1)}\n                >\n                  Back\n                </Button>\n              )}\n              <Button\n                type=\"submit\"\n                className=\"bg-fb-blue text-white hover:bg-blue-600\"\n                disabled={createCampaignMutation.isPending}\n              >\n                {currentStep === steps.length - 1 ? \"Launch Campaign\" : \"Next Step\"}\n                <ArrowRight className=\"ml-2\" size={16} />\n              </Button>\n            </div>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":14243},"client/src/components/dashboard/campaign-list.tsx":{"content":"import { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Facebook, Instagram, Edit, Pause, Play, MoreHorizontal } from \"lucide-react\";\nimport type { Campaign } from \"@shared/schema\";\n\nexport default function CampaignList() {\n  const { data: campaigns, isLoading } = useQuery<Campaign[]>({\n    queryKey: [\"/api/campaigns\"],\n  });\n\n  if (isLoading) {\n    return (\n      <Card className=\"border border-gray-100 shadow-sm\">\n        <CardHeader>\n          <div className=\"h-6 bg-gray-200 rounded w-48 animate-pulse\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"h-16 bg-gray-100 rounded animate-pulse\" />\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active':\n        return 'bg-success bg-opacity-10 text-success';\n      case 'paused':\n        return 'bg-warning bg-opacity-10 text-warning';\n      case 'draft':\n        return 'bg-gray-100 text-gray-600';\n      default:\n        return 'bg-gray-100 text-gray-600';\n    }\n  };\n\n  const getPlatformIcons = (platforms: string[]) => {\n    return platforms.map((platform) => {\n      if (platform === 'facebook') {\n        return <Facebook key=\"facebook\" className=\"text-fb-blue\" size={16} />;\n      }\n      if (platform === 'instagram') {\n        return <Instagram key=\"instagram\" className=\"text-ig-pink\" size={16} />;\n      }\n      return null;\n    });\n  };\n\n  return (\n    <Card className=\"border border-gray-100 shadow-sm\">\n      <CardHeader className=\"border-b border-gray-100\">\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"text-lg font-semibold text-text-dark\">Recent Campaigns</h3>\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-2\">\n              <label className=\"text-sm text-gray-500\">Filter:</label>\n              <select className=\"border border-gray-200 rounded-lg px-3 py-1 text-sm\">\n                <option>All Campaigns</option>\n                <option>Active</option>\n                <option>Paused</option>\n                <option>Draft</option>\n              </select>\n            </div>\n            <Button variant=\"ghost\" className=\"text-fb-blue hover:bg-fb-blue hover:bg-opacity-10\">\n              View All\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n      \n      <div className=\"overflow-x-auto\">\n        <table className=\"w-full\">\n          <thead className=\"bg-gray-50\">\n            <tr>\n              <th className=\"text-left py-3 px-6 text-xs font-medium text-gray-500 uppercase tracking-wide\">\n                Campaign\n              </th>\n              <th className=\"text-left py-3 px-6 text-xs font-medium text-gray-500 uppercase tracking-wide\">\n                Platform\n              </th>\n              <th className=\"text-left py-3 px-6 text-xs font-medium text-gray-500 uppercase tracking-wide\">\n                Status\n              </th>\n              <th className=\"text-right py-3 px-6 text-xs font-medium text-gray-500 uppercase tracking-wide\">\n                Budget\n              </th>\n              <th className=\"text-right py-3 px-6 text-xs font-medium text-gray-500 uppercase tracking-wide\">\n                Spent\n              </th>\n              <th className=\"text-right py-3 px-6 text-xs font-medium text-gray-500 uppercase tracking-wide\">\n                Duration\n              </th>\n              <th className=\"text-right py-3 px-6 text-xs font-medium text-gray-500 uppercase tracking-wide\">\n                Actions\n              </th>\n            </tr>\n          </thead>\n          <tbody className=\"divide-y divide-gray-100\">\n            {campaigns?.length === 0 ? (\n              <tr>\n                <td colSpan={7} className=\"py-12 text-center\">\n                  <div className=\"text-gray-500\">\n                    <p className=\"text-lg font-medium\">No campaigns yet</p>\n                    <p className=\"text-sm\">Create your first campaign to get started</p>\n                  </div>\n                </td>\n              </tr>\n            ) : (\n              campaigns?.map((campaign) => (\n                <tr key={campaign.id} className=\"hover:bg-gray-50\">\n                  <td className=\"py-4 px-6\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg\" />\n                      <div>\n                        <p className=\"font-medium text-text-dark\">{campaign.name}</p>\n                        <p className=\"text-sm text-gray-500\">\n                          Created {new Date(campaign.createdAt!).toLocaleDateString()}\n                        </p>\n                      </div>\n                    </div>\n                  </td>\n                  <td className=\"py-4 px-6\">\n                    <div className=\"flex items-center space-x-2\">\n                      {getPlatformIcons(campaign.platforms)}\n                    </div>\n                  </td>\n                  <td className=\"py-4 px-6\">\n                    <Badge className={`${getStatusColor(campaign.status)} border-0`}>\n                      <div className=\"w-1.5 h-1.5 bg-current rounded-full mr-2\" />\n                      {campaign.status.charAt(0).toUpperCase() + campaign.status.slice(1)}\n                    </Badge>\n                  </td>\n                  <td className=\"py-4 px-6 text-right font-medium text-text-dark\">\n                    ${campaign.dailyBudget}\n                  </td>\n                  <td className=\"py-4 px-6 text-right text-gray-600\">\n                    ${campaign.spent}\n                  </td>\n                  <td className=\"py-4 px-6 text-right text-gray-600\">\n                    {campaign.duration} days\n                  </td>\n                  <td className=\"py-4 px-6 text-right\">\n                    <div className=\"flex items-center justify-end space-x-2\">\n                      <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-400 hover:text-fb-blue\">\n                        <Edit size={14} />\n                      </Button>\n                      <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-400 hover:text-warning\">\n                        {campaign.status === 'active' ? <Pause size={14} /> : <Play size={14} />}\n                      </Button>\n                      <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-400 hover:text-gray-600\">\n                        <MoreHorizontal size={14} />\n                      </Button>\n                    </div>\n                  </td>\n                </tr>\n              ))\n            )}\n          </tbody>\n        </table>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":6992},"client/src/components/dashboard/quick-actions.tsx":{"content":"import { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Facebook, Instagram, Wand2 } from \"lucide-react\";\nimport { useState } from \"react\";\nimport CampaignWizard from \"@/components/campaigns/campaign-wizard\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { DashboardStats } from \"@/lib/types\";\n\nexport default function QuickActions() {\n  const [showWizard, setShowWizard] = useState(false);\n  \n  const { data: stats } = useQuery<DashboardStats>({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  return (\n    <>\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        <div className=\"lg:col-span-2\">\n          <Card className=\"border border-gray-100 shadow-sm\">\n            <CardHeader className=\"border-b border-gray-100\">\n              <h3 className=\"text-lg font-semibold text-text-dark\">Quick Campaign Creation</h3>\n              <p className=\"text-gray-500 text-sm\">Get your ads running in minutes with our automation</p>\n            </CardHeader>\n            <CardContent className=\"p-6 space-y-4\">\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                <button \n                  onClick={() => setShowWizard(true)}\n                  className=\"p-4 border border-gray-200 rounded-lg hover:border-fb-blue hover:bg-fb-blue hover:bg-opacity-5 transition-all group\"\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-10 h-10 bg-fb-blue bg-opacity-10 rounded-lg flex items-center justify-center group-hover:bg-fb-blue group-hover:bg-opacity-20\">\n                      <Facebook className=\"text-fb-blue\" size={20} />\n                    </div>\n                    <div className=\"text-left\">\n                      <p className=\"font-medium text-text-dark\">Facebook Campaign</p>\n                      <p className=\"text-sm text-gray-500\">Launch Facebook ads quickly</p>\n                    </div>\n                  </div>\n                </button>\n                \n                <button \n                  onClick={() => setShowWizard(true)}\n                  className=\"p-4 border border-gray-200 rounded-lg hover:border-ig-pink hover:bg-ig-pink hover:bg-opacity-5 transition-all group\"\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-10 h-10 bg-ig-pink bg-opacity-10 rounded-lg flex items-center justify-center group-hover:bg-ig-pink group-hover:bg-opacity-20\">\n                      <Instagram className=\"text-ig-pink\" size={20} />\n                    </div>\n                    <div className=\"text-left\">\n                      <p className=\"font-medium text-text-dark\">Instagram Campaign</p>\n                      <p className=\"text-sm text-gray-500\">Create Instagram ads</p>\n                    </div>\n                  </div>\n                </button>\n              </div>\n              \n              <div className=\"pt-4 border-t border-gray-100\">\n                <Button \n                  onClick={() => setShowWizard(true)}\n                  className=\"w-full bg-fb-blue text-white hover:bg-blue-600\"\n                >\n                  <Wand2 className=\"mr-2\" size={16} />\n                  Start Smart Campaign Wizard\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"space-y-6\">\n          <Card className=\"border border-gray-100 shadow-sm\">\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-lg font-semibold text-text-dark mb-4\">Today's Budget</h3>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-gray-600\">Spent</span>\n                  <span className=\"font-semibold text-text-dark\">\n                    ${stats?.totalSpent.toFixed(0) || '0'}\n                  </span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-gray-600\">Remaining</span>\n                  <span className=\"font-semibold text-success\">\n                    ${stats?.budgetRemaining.toFixed(0) || '0'}\n                  </span>\n                </div>\n                <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                  <div \n                    className=\"bg-fb-blue h-2 rounded-full\" \n                    style={{ \n                      width: stats ? `${(stats.totalSpent / (stats.totalSpent + stats.budgetRemaining)) * 100}%` : '0%' \n                    }}\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border border-gray-100 shadow-sm\">\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-lg font-semibold text-text-dark mb-4\">Active Campaigns</h3>\n              <div className=\"space-y-3\">\n                <div className=\"text-3xl font-bold text-success\">\n                  {stats?.activeCampaigns || 0}\n                </div>\n                <p className=\"text-gray-500 text-sm\">Running campaigns</p>\n                <div className=\"flex items-center text-sm text-success\">\n                  <span>3 new this week</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {showWizard && (\n        <CampaignWizard onClose={() => setShowWizard(false)} />\n      )}\n    </>\n  );\n}\n","size_bytes":5548},"client/src/components/dashboard/stats-cards.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Eye, MousePointer, Percent, DollarSign } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { DashboardStats } from \"@/lib/types\";\n\nexport default function StatsCards() {\n  const { data: stats, isLoading } = useQuery<DashboardStats>({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {[...Array(4)].map((_, i) => (\n          <Card key={i} className=\"animate-pulse\">\n            <CardContent className=\"pt-6\">\n              <div className=\"h-12 w-12 bg-gray-200 rounded-xl mb-4\" />\n              <div className=\"h-8 bg-gray-200 rounded mb-1\" />\n              <div className=\"h-4 bg-gray-200 rounded w-20\" />\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  if (!stats) return null;\n\n  const statCards = [\n    {\n      title: \"Impressions\",\n      value: `${(stats.totalImpressions / 1000000).toFixed(1)}M`,\n      change: \"+12%\",\n      icon: Eye,\n      color: \"bg-fb-blue\",\n    },\n    {\n      title: \"Clicks\",\n      value: `${(stats.totalClicks / 1000).toFixed(1)}K`,\n      change: \"+8%\",\n      icon: MousePointer,\n      color: \"bg-ig-pink\",\n    },\n    {\n      title: \"CTR\",\n      value: `${stats.avgCtr.toFixed(2)}%`,\n      change: \"+2.1%\",\n      icon: Percent,\n      color: \"bg-success\",\n    },\n    {\n      title: \"Cost per Click\",\n      value: `$${stats.avgCpc.toFixed(2)}`,\n      change: \"-15%\",\n      icon: DollarSign,\n      color: \"bg-warning\",\n    },\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n      {statCards.map((stat) => {\n        const Icon = stat.icon;\n        return (\n          <Card key={stat.title} className=\"border border-gray-100 shadow-sm\">\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className={`w-12 h-12 ${stat.color} bg-opacity-10 rounded-xl flex items-center justify-center`}>\n                  <Icon className={`${stat.color === 'bg-fb-blue' ? 'text-fb-blue' : \n                    stat.color === 'bg-ig-pink' ? 'text-ig-pink' : \n                    stat.color === 'bg-success' ? 'text-success' : 'text-warning'}`} size={20} />\n                </div>\n                <span className=\"text-success text-sm font-medium\">{stat.change}</span>\n              </div>\n              <h3 className=\"text-2xl font-bold text-text-dark mb-1\">{stat.value}</h3>\n              <p className=\"text-gray-500 text-sm\">{stat.title}</p>\n            </CardContent>\n          </Card>\n        );\n      })}\n    </div>\n  );\n}\n","size_bytes":2711},"client/src/components/layout/header.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Link, useLocation } from \"wouter\";\nimport { Zap, Plus } from \"lucide-react\";\nimport { useState } from \"react\";\nimport CampaignWizard from \"@/components/campaigns/campaign-wizard\";\n\nexport default function Header() {\n  const [location] = useLocation();\n  const [showWizard, setShowWizard] = useState(false);\n\n  const navItems = [\n    { path: \"/\", label: \"Dashboard\" },\n    { path: \"/campaigns\", label: \"Campaigns\" },\n    { path: \"/templates\", label: \"Templates\" },\n    { path: \"/analytics\", label: \"Analytics\" },\n  ];\n\n  return (\n    <>\n      <header className=\"bg-white border-b border-gray-200 sticky top-0 z-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-8\">\n              <Link href=\"/\">\n                <div className=\"flex items-center space-x-3 cursor-pointer\">\n                  <div className=\"w-8 h-8 bg-fb-blue rounded-lg flex items-center justify-center\">\n                    <Zap className=\"text-white\" size={16} />\n                  </div>\n                  <h1 className=\"text-xl font-semibold text-text-dark\">AdFlow Pro</h1>\n                </div>\n              </Link>\n              <nav className=\"hidden md:flex space-x-6\">\n                {navItems.map((item) => (\n                  <Link key={item.path} href={item.path}>\n                    <a className={`pb-4 px-1 text-sm font-medium border-b-2 transition-colors ${\n                      location === item.path\n                        ? \"text-fb-blue border-fb-blue\"\n                        : \"text-gray-500 border-transparent hover:text-text-dark\"\n                    }`}>\n                      {item.label}\n                    </a>\n                  </Link>\n                ))}\n              </nav>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Button \n                onClick={() => setShowWizard(true)}\n                className=\"bg-fb-blue text-white hover:bg-blue-600\"\n              >\n                <Plus className=\"mr-2\" size={16} />\n                Create Campaign\n              </Button>\n              <Avatar>\n                <AvatarFallback>U</AvatarFallback>\n              </Avatar>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {showWizard && (\n        <CampaignWizard onClose={() => setShowWizard(false)} />\n      )}\n    </>\n  );\n}\n","size_bytes":2562},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { \n  TrendingUp, \n  Facebook, \n  Instagram, \n  Target, \n  Wand2, \n  Copy, \n  Bot, \n  Settings, \n  HelpCircle \n} from \"lucide-react\";\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n\n  const menuSections = [\n    {\n      title: \"Campaign Management\",\n      items: [\n        { path: \"/\", label: \"Overview\", icon: TrendingUp },\n        { path: \"/campaigns?platform=facebook\", label: \"Facebook Ads\", icon: Facebook },\n        { path: \"/campaigns?platform=instagram\", label: \"Instagram Ads\", icon: Instagram },\n        { path: \"/audience\", label: \"Audience Manager\", icon: Target },\n      ]\n    },\n    {\n      title: \"Tools\",\n      items: [\n        { path: \"/builder\", label: \"Ad Builder\", icon: Wand2 },\n        { path: \"/templates\", label: \"Templates\", icon: Copy },\n        { path: \"/automation\", label: \"Automation\", icon: Bot },\n      ]\n    },\n    {\n      title: \"Account\",\n      items: [\n        { path: \"/settings\", label: \"Settings\", icon: Settings },\n        { path: \"/support\", label: \"Support\", icon: HelpCircle },\n      ]\n    }\n  ];\n\n  return (\n    <aside className=\"w-64 bg-white border-r border-gray-200 min-h-screen hidden lg:block\">\n      <div className=\"p-4 space-y-6\">\n        {menuSections.map((section) => (\n          <div key={section.title}>\n            <h3 className=\"text-xs font-medium text-gray-500 uppercase tracking-wide mb-3\">\n              {section.title}\n            </h3>\n            <nav className=\"space-y-1\">\n              {section.items.map((item) => {\n                const Icon = item.icon;\n                const isActive = location === item.path || \n                  (item.path === \"/\" && location === \"/\");\n                \n                return (\n                  <Link key={item.path} href={item.path}>\n                    <a className={`px-3 py-2 rounded-lg text-sm font-medium flex items-center transition-colors ${\n                      isActive\n                        ? \"bg-fb-blue bg-opacity-10 text-fb-blue\"\n                        : \"text-gray-600 hover:bg-gray-50\"\n                    }`}>\n                      <Icon className=\"mr-3\" size={16} />\n                      {item.label}\n                    </a>\n                  </Link>\n                );\n              })}\n            </nav>\n          </div>\n        ))}\n      </div>\n    </aside>\n  );\n}\n","size_bytes":2376},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress-indicator.tsx":{"content":"interface ProgressIndicatorProps {\n  steps: string[];\n  currentStep: number;\n}\n\nexport default function ProgressIndicator({ steps, currentStep }: ProgressIndicatorProps) {\n  return (\n    <div className=\"flex items-center space-x-4\">\n      {steps.map((step, index) => (\n        <div key={index} className=\"flex items-center space-x-2\">\n          <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${\n            index <= currentStep\n              ? \"bg-fb-blue text-white\"\n              : \"bg-gray-200 text-gray-600\"\n          }`}>\n            {index + 1}\n          </div>\n          <span className={`text-sm ${\n            index <= currentStep ? \"text-fb-blue font-medium\" : \"text-gray-500\"\n          }`}>\n            {step}\n          </span>\n          {index < steps.length - 1 && (\n            <div className=\"flex-1 h-px bg-gray-200 mx-4 w-16\" />\n          )}\n        </div>\n      ))}\n    </div>\n  );\n}\n","size_bytes":946},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\";\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\";\nimport { cn } from \"@/lib/utils\";\n\nconst Tabs = TabsPrimitive.Root;\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n));\nTabsList.displayName = TabsPrimitive.List.displayName;\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName;\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n));\nTabsContent.displayName = TabsPrimitive.Content.displayName;\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent };","size_bytes":1892},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nTextarea.displayName = \"Textarea\";\n\nexport { Textarea };","size_bytes":776},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}